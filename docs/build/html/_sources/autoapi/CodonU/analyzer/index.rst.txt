:py:mod:`CodonU.analyzer`
=========================

.. py:module:: CodonU.analyzer


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   cai_comp/index.rst
   cbi_comp/index.rst
   enc_comp/index.rst
   internal_comp/index.rst
   rscu_comp/index.rst


Package Contents
----------------


Functions
~~~~~~~~~

.. autoapisummary::

   CodonU.analyzer.calculate_cai
   CodonU.analyzer.calculate_rscu
   CodonU.analyzer.calculate_cbi
   CodonU.analyzer.calculate_enc



.. py:function:: calculate_cai(records, genetic_code_num: int, min_len_threshold: int = 200, gene_analysis: bool = False) -> dict[str, float] | dict[str, dict[str, float]]

   Calculates cai values for each codon

   :param records: The generator object containing sequence object
   :param genetic_code_num: Genetic table number for codon table
   :param min_len_threshold: Minimum length of nucleotide sequence to be considered as gene
   :param gene_analysis: Option if gene analysis (True) or genome analysis (False) (optional)
   :return: The dictionary containing codon and cai value pairs


.. py:function:: calculate_rscu(records, genetic_code_num: int, min_len_threshold: int = 200, gene_analysis: bool = False) -> dict[str, float] | dict[str, dict[str, float]]

   Calculates rscu values for each codon

   :param records: The generator object containing sequence object
   :param genetic_code_num: Genetic table number for codon table
   :param min_len_threshold: Minimum length of nucleotide sequence to be considered as gene
   :param gene_analysis: Option if gene analysis (True) or genome analysis (False) (optional)
   :return: The dictionary containing codon and rscu value pairs


.. py:function:: calculate_cbi(records, genetic_code_num: int, min_len_threshold: int = 200, gene_analysis: bool = False) -> dict[str, tuple[float, str]] | dict[str, dict[str, tuple[float, str]]]

   Calculates cbi values for each amino acid

   :param records: The generator object containing sequence object
   :param genetic_code_num: Genetic table number for codon table
   :param min_len_threshold: Minimum length of nucleotide sequence to be considered as gene
   :param gene_analysis: Option if gene analysis (True) or genome analysis (False) (optional)
   :return: The dictionary containing amino acid and cbi value, optimal codon pairs


.. py:function:: calculate_enc(records, genetic_code_num: int, min_len_threshold=200, gene_analysis: bool = False) -> float | dict[str, float]

   Calculates ENc value for a given sequences

   :param records: The generator object containing sequence object
   :param genetic_code_num: Genetic table number for codon table
   :param min_len_threshold: Minimum length of nucleotide sequence to be considered as gene
   :param gene_analysis: Option if gene analysis (True) or genome analysis (False) (optional)
   :return: The ENc value or a dictionary containing gene number and corresponding ENc value


