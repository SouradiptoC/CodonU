:py:mod:`CodonU.analyzer`
=========================

.. py:module:: CodonU.analyzer


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   aromaticity_comp/index.rst
   cai_comp/index.rst
   cbi_comp/index.rst
   enc_comp/index.rst
   generate_report/index.rst
   generate_report_summary/index.rst
   gravy_comp/index.rst
   internal_comp/index.rst
   rscu_comp/index.rst


Package Contents
----------------


Functions
~~~~~~~~~

.. autoapisummary::

   CodonU.analyzer.calculate_cai
   CodonU.analyzer.calculate_rscu
   CodonU.analyzer.calculate_cbi
   CodonU.analyzer.calculate_enc
   CodonU.analyzer.calculate_gravy
   CodonU.analyzer.calculate_aromaticity
   CodonU.analyzer.generate_report_summary
   CodonU.analyzer.generate_report



.. py:function:: calculate_cai(handle: str, genetic_code_num: int, min_len_threshold: int = 200, gene_analysis: bool = False, save_file: bool = False, file_name: str = 'CAI_report', folder_path: str = 'Report') -> dict[str, float | dict[str, float]]

   Calculates cai values for each codon

   :param handle: Handle to the file, or the filename as a string
   :param genetic_code_num: Genetic table number for codon table
   :param min_len_threshold: Minimum length of nucleotide sequence to be considered as gene
   :param gene_analysis: Option if gene analysis (True) or genome analysis (False) (optional)
   :param save_file: Option for saving the values in xlsx format (Optional)
   :param file_name: Intended file name (Optional)
   :param folder_path: Folder path where image should be saved (optional)
   :return: The dictionary containing codon and cai value pairs if gene_analysis is False, otherwise returns the
   dictionary containing gene name and corresponding codon and cai value pairs


.. py:function:: calculate_rscu(handle: str, genetic_code_num: int, min_len_threshold: int = 200, gene_analysis: bool = False, save_file: bool = False, file_name: str = 'RSCU_report', folder_path: str = 'Report') -> dict[str, float | dict[str, float]]

   Calculates rscu values for each codon

   :param handle: Handle to the file, or the filename as a string
   :param genetic_code_num: Genetic table number for codon table
   :param min_len_threshold: Minimum length of nucleotide sequence to be considered as gene
   :param gene_analysis: Option if gene analysis (True) or genome analysis (False) (optional)
   :param save_file: Option for saving the values in xlsx format (Optional)
   :param file_name: Intended file name (Optional)
   :param folder_path: Folder path where image should be saved (optional)
   :return: The dictionary containing codon and rscu value pairs if gene_analysis is false, otherwise the dictionary containing the gene name and the codon & rscu value pairs


.. py:function:: calculate_cbi(handle: str, genetic_code_num: int, min_len_threshold: int = 66, gene_analysis: bool = False, save_file: bool = False, file_name: str = 'CBI_report', folder_path: str = 'Report') -> dict[str, tuple[float, str] | dict[str, tuple[float, str]]]

   Calculates cbi values for each amino acid

   :param handle: Handle to the file, or the filename as a string
   :param genetic_code_num: Genetic table number for codon table
   :param min_len_threshold: Minimum length of nucleotide sequence to be considered as gene
   :param gene_analysis: Option if gene analysis (True) or genome analysis (False) (optional)
   :param save_file: Option for saving the values in xlsx format (Optional)
   :param file_name: Intended file name (Optional)
   :param folder_path: Folder path where image should be saved (optional)
   :return: The dictionary containing amino acid and cbi value, optimal codon pairs if gene_analysis is false,
   otherwise returns the dictionary containing gene name and dictionary containing amino acid and cbi value,
   optimal codon pairs
    


.. py:function:: calculate_enc(handle: str, genetic_code_num: int, min_len_threshold=200, gene_analysis: bool = False, save_file: bool = False, file_name: str = 'ENc_report', folder_path: str = 'Report') -> float or dict[str, float]

   Calculates ENc value for a given sequences

   :param handle: Handle to the file, or the filename as a string
   :param genetic_code_num: Genetic table number for codon table
   :param min_len_threshold: Minimum length of nucleotide sequence to be considered as gene
   :param gene_analysis: Option if gene analysis (True) or genome analysis (False) (optional)
   :param save_file: Option for saving the values in xlsx format (Optional)
   :param file_name: Intended file name (Optional)
   :param folder_path: Folder path where image should be saved (optional)
   :return: The ENc value if gene_analysis is false, else a dictionary containing gene number and corresponding ENc value


.. py:function:: calculate_gravy(handle: str, min_len_threshold: int = 66, gene_analysis: bool = False, save_file: bool = False, file_name: str = 'GRAVY_report', folder_path: str = 'Report') -> dict[str, float] | float

   Calculates the gravy score for a given protein sequence

   :param handle: Handle to the file, or the filename as a string
   :param min_len_threshold: Minimum length of protein sequence to be considered as gene
   :param gene_analysis: Option if gene analysis (True) or genome analysis (False) (optional)
   :param save_file: Option for saving the values in xlsx format (Optional)
   :param file_name: Intended file name (Optional)
   :param folder_path: Folder path where image should be saved (optional)
   :return: The GRAVY score of given sequence if gene_analysis is false, else the dictionary containing gene number and
   corresponding GRAVY score


.. py:function:: calculate_aromaticity(handle: str, min_len_threshold: int = 66, gene_analysis: bool = False, save_file: bool = False, file_name: str = 'Aroma_report', folder_path: str = 'Report') -> dict[str, float] | float

   Calculates the aromaticity score for a given protein sequence

   :param handle: Handle to the file, or the filename as a string
   :param min_len_threshold: Minimum length of protein sequence to be considered as gene
   :param gene_analysis: Option if gene analysis (True) or genome analysis (False) (optional)
   :param save_file: Option for saving the values in xlsx format (Optional)
   :param file_name: Intended file name (Optional)
   :param folder_path: Folder path where image should be saved (optional)
   :return: The aromaticity score of given sequence if gene_analysis is false, else the dictionary containing
   gene number and corresponding GRAVY score


.. py:function:: generate_report_summary(handle: str, _type: str, genetic_code_num: int, min_len_threshold: int, res_folder_path: str = 'Report')

   Generate the report for given sequence **[best for genome analysis]**

   For nucleotide sequence, this generates reports of:
       - RSCU
       - CAI
       - CBI
       - ENc

   For protein sequence, this generates reports of:
       - GRAVY score
       - Aromaticity score


   **NOTE** Possible types are
       - nuc: For nucleotide sequence
       - aa: For protein sequence

   :param handle: Handle to the file, or the filename as a string
   :param _type: Type of the sequence [nuc or aa]
   :param genetic_code_num: Genetic table number for codon table
   :param min_len_threshold: Minimum length of sequence to be considered as gene
   :param res_folder_path: The path of folder where the file will be saved


.. py:function:: generate_report(handle: str, _type: str, genetic_code_num: int, min_len_threshold: int, res_folder_path: str = 'Report')

   Generate the report for given sequence **[best for gene analysis]**

   For nucleotide sequence, this generates reports of:
       - RSCU
       - CAI
       - CBI
       - ENc

   For protein sequence, this generates reports of:
       - GRAVY score
       - Aromaticity score


   **NOTE** Possible types are
       - nuc: For nucleotide sequence
       - aa: For protein sequence

   :param handle: Handle to the file, or the filename as a string
   :param _type: Type of the sequence [nuc or aa]
   :param genetic_code_num: Genetic table number for codon table
   :param min_len_threshold: Minimum length of sequence to be considered as gene
   :param res_folder_path: The path of folder where the file will be saved
   :return:


