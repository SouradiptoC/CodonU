:py:mod:`CodonU.analyzer.internal_comp`
=======================================

.. py:module:: CodonU.analyzer.internal_comp


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   CodonU.analyzer.internal_comp.g3
   CodonU.analyzer.internal_comp.a3
   CodonU.analyzer.internal_comp.gc_123
   CodonU.analyzer.internal_comp.at_123
   CodonU.analyzer.internal_comp.filter_reference
   CodonU.analyzer.internal_comp.syn_codons
   CodonU.analyzer.internal_comp.sf_vals
   CodonU.analyzer.internal_comp.cbi
   CodonU.analyzer.internal_comp.enc
   CodonU.analyzer.internal_comp.gravy
   CodonU.analyzer.internal_comp.aromaticity



.. py:function:: g3(seq: Seq | str) -> float

   Calculates percentage of G content for third position

   :param seq: Provided sequence
   :return: Percentage of G content


.. py:function:: a3(seq: Seq | str) -> float

   Calculates percentage of A content for third position

   :param seq: Provided sequence
   :return: Percentage of A content


.. py:function:: gc_123(seq: Seq | str) -> tuple[float, float | int, float | int, float | int]

   Calculate G+C content: total, for first, second and third positions

   :param seq: Provided sequence
   :return: The G+C percentage for the entire sequence, and the three codon positions


.. py:function:: at_123(seq: Seq | str) -> tuple[float, float | int, float | int, float | int]

   Calculate G+C content: total, for first, second and third positions

   :param seq: Provided sequence
   :return: The A+T percentage for the entire sequence, and the three codon positions


.. py:function:: filter_reference(records, min_len_threshold: int) -> list[Bio.Seq.Seq]

   Filters the list of reference based on given threshold of length

   :param records: A generator object holding the sequence objects
   :param min_len_threshold: Minimum length of nucleotide sequence to be considered as gene
   :return: The list of usable sequences


.. py:function:: syn_codons(codon_table: Bio.Data.CodonTable.NCBICodonTableDNA) -> dict[str, list[str]]

   Creates the protein, codon dictionary where protein is key

   :param codon_table: The codon table
   :return: The dict having protein as key


.. py:function:: sf_vals(codon_table: Bio.Data.CodonTable.NCBICodonTableDNA) -> dict[int, list[str]]

   Creates the sf value and protein dictionary where sf value is key

   :param codon_table: The codon table
   :return: The dict having sf values as key


.. py:function:: cbi(prot_seq: Seq | str, reference: list[Bio.Seq.Seq], genetic_code: int) -> tuple[float, str]

   Calculates codon bias index (CBI) for a given protein seq based on Bennetzen and Hall (1982)

   :param prot_seq: The Protein Sequence
   :param reference: List of reference nucleotide sequences
   :param genetic_code: Genetic table number for codon table
   :return: A tuple of CBI val and the optimal codon
   :raises NoSynonymousCodonWarning: When there is no synonymous codons
   :raises MissingCodonWarning: When no codons translate to provided Amino acid


.. py:function:: enc(references: list[Seq | str], genetic_code: int) -> float

   Calculates Effective number of codons (Enc) based on Wright (1989) and Fuglsang (2004)

   :param references: List of reference nucleotide sequences
   :param genetic_code: Genetic table number for codon table
   :return: Calculated Enc value for the sequence(s)
   :raises MissingCodonWarning: If there is no codon for a certain amino acid
   :raises NoProteinError: If there is no codon for a certain set of amino acid


.. py:function:: gravy(seq: Seq | str) -> float

   Computes the GRAVY score according to Kyte and Doolittle (1982)

   :param seq: Protein sequence
   :return: The GRAVY score


.. py:function:: aromaticity(seq: Seq | str) -> float

   Calculate the aromaticity score according to Lobry (1994).

   :param seq: Protein sequence
   :return: The aromaticity score


